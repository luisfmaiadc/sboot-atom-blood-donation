openapi: 3.0.3
info:
  title: DoeAqui API
  description: API atômica para o sistema de doação de sangue DoeAqui.
  version: 1.0.0

servers:
  - url: http://localhost:8080/v1

paths:
  /usuario:
    post:
      summary: Inserir novo usuário
      operationId: postNewUser
      tags:
        - Usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUsuarioRequest'
      responses:
        '201':
          description: Usuário cadastrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /usuario/{idUsuario}:
    get:
      summary: Obter informações de um usuário por ID
      operationId: getUserInfoById
      tags:
        - Usuario
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Informações do usuário obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '404':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

    patch:
      summary: Atualizar dados do usuário
      operationId: patchUserInfo
      tags:
        - Usuario
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsuarioRequest'
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /login:
    post:
      summary: Obter token JWT de autenticação
      operationId: postLoginCredentials
      tags:
        - Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '401':
          description: Não autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /login/{idUsuario}:
    get:
      summary: Obter informações de um login por ID do usuário
      operationId: getLoginInfoById
      tags:
        - Login
      parameters:
        - name: idUsuario
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Informações de um login obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '404':
          description: Login não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /tipoSanguineo:
    get:
      summary: Obter tipos sanguíneos
      operationId: getTiposSanguineos
      tags:
        - Tipo Sanguíneo
      responses:
        '200':
          description: Tipos sanguíneos obtidos com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TipoSanguineoResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /papel:
    get:
      summary: Obter papéis de usuários
      operationId: getPapeisUsuarios
      tags:
        - Papel de Usuário
      responses:
        '200':
          description: Papéis de usuários obtidos com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PapelResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /hemocentro:
    post:
      summary: Cadastrar novo hemocentro
      operationId: postNewHemocentro
      tags:
        - Hemocentro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewHemocentroRequest'
      responses:
        '201':
          description: Hemocentro cadastrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HemocentroResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

    get:
      summary: Obter informações de hemocentro por filtros
      operationId: getHemocentroByFilter
      tags:
        - Hemocentro
      parameters:
        - in: query
          name: nome
          schema:
            type: string
            maxLength: 150
          required: false
        - in: query
          name: telefone
          schema:
            type: string
            maxLength: 20
          required: false
        - in: query
          name: email
          schema:
            type: string
            format: email
            maxLength: 100
          required: false
      responses:
        '200':
          description: Hemocentro encontrado com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HemocentroResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /hemocentro/{idHemocentro}:
    get:
      summary: Obter informações de um hemocentro por ID
      operationId: getHemocentroInfoById
      tags:
        - Hemocentro
      parameters:
        - name: idHemocentro
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Informações do hemocentro obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HemocentroResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '404':
          description: Hemocentro não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /solicitacaoDoacao:
    post:
      summary: Cadastrar nova solicitação de doação
      operationId: postNewSolicitacaoDoacao
      tags:
        - Solicitação de Doação
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSolicitacaoDoacaoRequest'
      responses:
        '201':
          description: Solicitação de doação cadastrada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolicitacaoDoacaoResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

    get:
      summary: Obter informações de solicitação de doação por filtros
      operationId: getSolicitacaoDoacaoByFilter
      tags:
        - Solicitação de Doação
      parameters:
        - in: query
          name: idUsuario
          schema:
            type: integer
          required: false
        - in: query
          name: idHemocentro
          schema:
            type: integer
          required: false
        - in: query
          name: idTipoSanguineo
          schema:
            type: integer
          required: false
        - in: query
          name: dataSolicitacao
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: status
          schema:
            type: string
            maxLength: 20
          required: false
        - in: query
          name: dataEncerramento
          schema:
            type: string
            format: date
          required: false
      responses:
        '200':
          description: Solicitação de doação encontrada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SolicitacaoDoacaoResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /solicitacaoDoacao/{idSolicitacaoDoacao}:
    get:
      summary: Obter informações de um solicitação de doação por ID
      operationId: getSolicitacaoDoacaoInfoById
      tags:
        - Solicitação de Doação
      parameters:
        - name: idSolicitacaoDoacao
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Informações de uma solicitação de doação obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolicitacaoDoacaoResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '404':
          description: Solicitação de doação não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

    patch:
      summary: Atualizar dados de uma solicitação de doação
      operationId: patchSolicitacaoDoacaoInfo
      tags:
        - Solicitação de Doação
      parameters:
        - name: idSolicitacaoDoacao
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSolicitacaoDoacaoRequest'
      responses:
        '200':
          description: Solicitação de doação atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolicitacaoDoacaoResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '404':
          description: Solicitação de doação não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

components:
  schemas:
    NewUsuarioRequest:
      type: object
      required:
        - nome
        - dataNascimento
        - cpf
        - genero
        - idTipoSanguineo
        - idPapel
        - login
      properties:
        nome:
          type: string
          minLength: 1
          maxLength: 150
        dataNascimento:
          type: string
          format: date
        cpf:
          type: string
          minLength: 11
          maxLength: 11
          pattern: '^[0-9]{11}$'
        genero:
          type: string
          minLength: 1
          maxLength: 1
        telefone:
          type: string
          maxLength: 20
        idTipoSanguineo:
          type: integer
          format: int32
        idPapel:
          type: integer
          format: int32
        login:
          $ref: '#/components/schemas/NewLoginRequest'

    NewLoginRequest:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        senha:
          type: string
          format: password
          minLength: 8
          maxLength: 100

    UsuarioResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        nome:
          type: string
        dataNascimento:
          type: string
          format: date
        cpf:
          type: string
        genero:
          type: string
        email:
          type: string
          format: email
        telefone:
          type: string
        idTipoSanguineo:
          type: integer
          format: int32
        idPapel:
          type: integer
          format: int32
        ativo:
          type: boolean

    LoginRequest:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        senha:
          type: string

    AuthenticationResponse:
      type: object
      required:
        - token
        - expirationTime
      properties:
        token:
          type: string
        expirationTime:
          type: string
          format: date-time

    LoginResponse:
      type: object
      properties:
        idUsuario:
          type: integer
        email:
          type: string
          format: email

    TipoSanguineoResponse:
      type: object
      properties:
        id:
          type: string
        tipo:
          type: string
        fator:
          type: string

    PapelResponse:
      type: object
      properties:
        id:
          type: string
        nome:
          type: string

    NewHemocentroRequest:
      type: object
      required:
        - nome
        - telefone
        - email
      properties:
        nome:
          type: string
          minLength: 1
          maxLength: 150
        telefone:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          maxLength: 100

    HemocentroResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        nome:
          type: string
          minLength: 1
          maxLength: 150
        telefone:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          maxLength: 100
        ativo:
          type: boolean

    NewSolicitacaoDoacaoRequest:
      type: object
      required:
        - idUsuario
        - idHemocentro
        - idTipoSanguineo
      properties:
        idUsuario:
          type: integer
          format: int32
        idHemocentro:
          type: integer
          format: int32
        idTipoSanguineo:
          type: integer
          format: int32
          minimum: 1
          maximum: 8
        observacoes:
          type: string

    SolicitacaoDoacaoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        idUsuario:
          type: integer
          format: int32
        idHemocentro:
          type: integer
          format: int32
        idTipoSanguineo:
          type: integer
          format: int32
        dataSolicitacao:
          type: string
          format: date-time
        status:
          type: string
        dataEncerramento:
          type: string
          format: date-time
        observacoes:
          type: string

    UpdateUsuarioRequest:
      type: object
      properties:
        genero:
          type: string
          minLength: 1
          maxLength: 1
        telefone:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 100
        senha:
          type: string
          minLength: 8
          maxLength: 100
        idPapel:
          type: integer
          format: int32

    UpdateSolicitacaoDoacaoRequest:
      type: object
      properties:
        status:
          type: string
          minLength: 1
          maxLength: 20
        observacoes:
          type: string

    StandardError:
      type: object
      required:
        - timestamp
        - status
        - error
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string