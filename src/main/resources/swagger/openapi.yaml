openapi: 3.0.3
info:
  title: DoeAqui API
  description: API atômica para o sistema de doação de sangue DoeAqui.
  version: 1.0.0

servers:
  - url: http://localhost:8080/v1

paths:
  /usuario:
    post:
      summary: Inserir novo usuário
      operationId: postNewUser
      tags:
        - Usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUsuarioRequest'
      responses:
        '201':
          description: Usuário cadastrado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /login:
    post:
      summary: Obter token JWT de autenticação
      operationId: postLoginCredentials
      tags:
        - Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /tipoSanguineo:
    get:
      summary: Obter tipos sanguíneos
      operationId: getTiposSanguineos
      tags:
        - Tipo Sanguíneo
      responses:
        '200':
          description: Tipos sanguíneos obtidos com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TipoSanguineoResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /papel:
    get:
      summary: Obter papéis de usuários
      operationId: getPapeisUsuarios
      tags:
        - Papel de Usuário
      responses:
        '200':
          description: Papéis de usuários obtidos com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PapelResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

  /hemocentro:
    post:
      summary: Cadastrar novo hemocentro
      operationId: postNewHemocentro
      tags:
        - Hemocentro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewHemocentroRequest'
      responses:
        '201':
          description: Hemocentro cadastrado com sucesso
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/HemocentroResponse'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'
        '500':
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardError'

components:
  schemas:
    NewUsuarioRequest:
      type: object
      required:
        - nome
        - dataNascimento
        - cpf
        - genero
        - idTipoSanguineo
        - idPapel
        - login
      properties:
        nome:
          type: string
          minLength: 1
          maxLength: 150
        dataNascimento:
          type: string
          format: date
        cpf:
          type: string
          minLength: 11
          maxLength: 11
          pattern: '^[0-9]{11}$'
        genero:
          type: string
          minLength: 1
          maxLength: 1
        telefone:
          type: string
          maxLength: 20
        idTipoSanguineo:
          type: integer
          format: int32
        idPapel:
          type: integer
          format: int32
        login:
          $ref: '#/components/schemas/NewLoginRequest'

    NewLoginRequest:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        senha:
          type: string
          format: password
          minLength: 8
          maxLength: 100

    UsuarioResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        nome:
          type: string
        dataNascimento:
          type: string
          format: date
        cpf:
          type: string
        genero:
          type: string
        email:
          type: string
          format: email
        telefone:
          type: string
        idTipoSanguineo:
          type: integer
          format: int32
        idPapel:
          type: integer
          format: int32
        ativo:
          type: boolean

    LoginRequest:
      type: object
      required:
        - email
        - senha
      properties:
        email:
          type: string
          format: email
          maxLength: 100
        senha:
          type: string

    LoginResponse:
      type: object
      required:
        - token
        - expirationTime
      properties:
        token:
          type: string
        expirationTime:
          type: string
          format: date-time

    TipoSanguineoResponse:
      type: object
      properties:
        id:
          type: string
        tipo:
          type: string
        fator:
          type: string

    PapelResponse:
      type: object
      properties:
        id:
          type: string
        nome:
          type: string

    NewHemocentroRequest:
      type: object
      required:
        - nome
        - telefone
        - email
      properties:
        nome:
          type: string
          minLength: 1
          maxLength: 150
        telefone:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          maxLength: 100

    HemocentroResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        nome:
          type: string
          minLength: 1
          maxLength: 150
        telefone:
          type: string
          maxLength: 20
        email:
          type: string
          format: email
          maxLength: 100
        ativo:
          type: boolean

    StandardError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
      required:
        - timestamp
        - status
        - error